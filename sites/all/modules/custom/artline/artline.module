<?php
/**
 * Created by PhpStorm.
 * User: nhan
 * Date: 10/25/16
 * Time: 10:14 AM
 */
define('TIDSUKIEN', 108);
define('ONLINE', 170);
define('OFFLINE', 171);
module_load_include('inc', 'artline', 'artline.pages');
/**
 * Implement hook_menu()
 */
function artline_menu()
{
    $items = array();
    $items['article/uploader'] = array(
        'access arguments' => array('access content'),
        'page callback' => 'artline_article_uploader',
        'type' => MENU_CALLBACK
    );

    $items['article/link/%'] = array(
        'access arguments' => array('access content'),
        'page callback' => 'artline_article_shared',
        'page arguments' => array(2),
        'type' => MENU_CALLBACK
    );

    $items['uploader/post'] = array(
        'access arguments' => array('access content'),
        'page callback' => 'artline_article_uploader_post',
        'type' => MENU_CALLBACK
    );

    $items['artline/remove/%'] = array(
        'access arguments' => array('access content'),
        'page callback' => 'artline_article_uploader_remove',
        'page arguments' => array(2),
        'type' => MENU_CALLBACK
    );

    $items['artline/like/%/%'] = array(
        'access arguments' => array('access content'),
        'page callback' => 'artline_like_article',
        'page arguments' => array(2, 3),
        'type' => MENU_CALLBACK
    );
    $items['artline/get/like/%'] = array(
        'access arguments' => array('access content'),
        'page callback' => 'artline_get_count_like',
        'page arguments' => array(3),
        'type' => MENU_CALLBACK
    );

    $items['artline/post/comment'] = array(
        'access arguments' => array('access content'),
        'page callback' => 'artline_post_comment',
        'type' => MENU_CALLBACK
    );

    $items['artline/search'] = array(
        'access arguments' => array('access content'),
        'page callback' => 'artline_search_gss',
        'type' => MENU_CALLBACK
    );

    $items['artline/store/%node'] = array(
        'page callback' => 'artline_store_post',
        'page arguments' => array(2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['artline/product/%node'] = array(
        'page callback' => 'artline_product_post',
        'page arguments' => array(2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['artline/xu/%node'] = array(
        'page callback' => 'artline_product_gif',
        'page arguments' => array(2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

//    $items['artline/share/%node/%ctools_js'] = array(
//        'page callback' => 'artline_share_post',
//        'page arguments' => array(2, 3),
//        'access callback' => TRUE,
//        'type' => MENU_CALLBACK,
//    );
    $items['artline/edit/post'] = array(
        'page callback' => 'artline_edit_post',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['artline/uptop/%node'] = array(
        'page callback' => 'artline_uptop',
        'page arguments' => array(2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['artline/public/post'] = array(
        'page callback' => 'artline_public_post',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['artline/unpublic/post'] = array(
        'page callback' => 'artline_unpublic_post',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['artline/delete/post'] = array(
        'page callback' => 'artline_delete_post',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['artline/raw/post'] = array(
        'page callback' => 'artline_raw_post',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['admin/config/content/artline'] = array(
        'title' => 'Artline ',
        'description' => 'Control config for artline.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('artline_admin'),
        'access arguments' => array('administer artline'),
        'file' => 'artline.admin.inc',
    );

    $items['posts/list'] = array(
        'title' => 'Artline ',
        'page callback' => 'artline_get_post',
        'access callback' => TRUE,
        'file' => 'artline.pages.inc',
    );
    $items['my/posts'] = array(
        'title' => 'Bài viết của tôi ',
        'page callback' => 'artline_get_my_post',
        'access callback' => TRUE,
        'file' => 'artline.pages.inc',
    );
    $items['posts/list/pager'] = array(
        'title' => 'Artline ',
        'page callback' => 'artline_get_post_pager',
        'access callback' => TRUE,
        'file' => 'artline.pages.inc',
    );
    $items['posts/my/pager'] = array(
        'title' => 'Artline ',
        'page callback' => 'artline_get_my_post_pager',
        'access callback' => TRUE,
        'file' => 'artline.pages.inc',
    );
    $items['posts/category/pager'] = array(
        'title' => 'Artline ',
        'page callback' => 'artline_get_post_pager_category',
        'access callback' => TRUE,
        'file' => 'artline.pages.inc',
    );

    $items['posts/share/social'] = array(
        'page callback' => 'artline_share_social',
        'access callback' => TRUE,
        'file' => 'artline.pages.inc',
    );
    $items['gift/confirm/%'] = array(
        'page callback' => 'gift_confirm_update',
        'page arguments' => array(2),
        'access callback' => TRUE,
        'file' => 'artline.pages.inc',
    );

    $items['xu/update/action'] = array(
        'page callback' => 'xu_update_action',
        'access callback' => TRUE,
    );
    $items['admin/dashboard'] = array(
        'title' => 'Admin Dashboard ',
        'description' => 'Control config for artline.',
        'page callback' => 'artline_admins_dashboard',
        'access arguments' => array('administer artline'),
    );

    $items['user/invite/friend'] = array(
        'title' => 'Giới thiệu bạn bè',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('invite_friend'),
        'access callback' => TRUE,
        'access arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
        'file' => 'artline.pages.inc',
    );
    return $items;
}

/**
 * Implements hook_permission().
 */
function artline_permission()
{
    return array(
        'administer artline' => array(
            'title' => t('Administer Artline'),
            'restrict access' => TRUE,
        ),
    );
}

/**
 * Implementation of hook_theme().
 */
function artline_theme()
{
    $items = array();
    $items['artline_uploader'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'article-uploader',
    );
    $items['artline_post'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'post',
    );
    $items['artline_upload_content'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'upload-content',
    );

    $items['artline_category'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'category-menu',
    );
    $items['artline_post_block'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'post-block',
    );

    $items['artline_comment'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'comment',
    );
    $items['comment_artline_page'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'comment-page',
    );

    $items['user_block'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'user-block',
    );
    $items['store_list'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'store',
    );
    $items['admin_dashboard'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'dashboard',
    );
    $items['artline_footer'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'footer',
    );
    $items['post_list'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'post-list',
    );
    $items['post_list_detail'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'post-list-detail',
    );
    $items['post_list_pager'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'post-list-pager',
    );

    $items['100_post_store'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => '100-post-store',
    );
    $items['product_info'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'product-info',
    );
    $items['no_condition'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'no-condition',
    );

    $items['no_product'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'no-product',
    );
    $items['admins_dashboard'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'artline') . '/theme',
        'template' => 'admin-dashboard',
    );

    return $items;
}

/**
 * Implement hook_init
 */
function artline_init()
{
    drupal_add_js(drupal_get_path('module', 'artline') . '/js/dropzone.js');
    ctools_include('modal');
    ctools_modal_add_js();
    ctools_add_js('ajax-responder');

    //dropzone library
    drupal_add_js(drupal_get_path('module', 'artline') . '/js/newWaterfall.js');
    drupal_add_js(drupal_get_path('module', 'artline') . '/js/artlineinit.js');

}

/**
 * Implement add page uploader
 */

function artline_article_uploader()
{
    global $user;

    $files = get_uploaded_user($user->uid);
    return theme('artline_uploader', array('images' => $files, 'category' => get_category()));
}

/**
 * Implement page get uploader content image
 */
function artline_article_uploader_post()
{

    global $user;
    $domain = domain_get_domain();
    $id = $domain['domain_id'];
    $default_id = domain_default_id();
    $domains = domain_domains();
    $all_domain = array();
    foreach ($domains as $key => $do) {
        $all_domain[$do['domain_id']] = $do['domain_id'];
    }
    $storeFolder = DRUPAL_ROOT . '/uploads';   //2
    if (!empty($_FILES)) {
        $tempFile = $_FILES['file']['tmp_name'];          //3
        $filename_tmp = str_replace(' ', '', $_FILES['file']['name']);
        $filename_tmp = seo_friendly_url($filename_tmp);
        if (strpos($filename_tmp, 'jpg') !== false) {
            $type = '.jpg';
        }
        if (strpos($filename_tmp, 'jpeg') !== false) {
            $type = '.jpeg';
        }
        if (strpos($filename_tmp, 'png') !== false) {
            $type = '.png';
        }
        if (strpos($filename_tmp, 'gif') !== false) {
            $type = '.gif';
        }

        $targetFile = $storeFolder . '/' . $filename_tmp . $type;  //5
        move_uploaded_file($tempFile, $targetFile); //6
    }

    //get list files
    if (isset($_POST['image_upload']) && $_POST['image_upload'] == 1) {
        if (isset($_POST['upload'])) {
            $images = array();
            foreach ($_POST['upload'] as $entry) {
                $image_name = str_replace(' ', '', $entry);
                $image_name = seo_friendly_url($image_name);
                if (strpos($image_name, 'jpg') !== false) {
                    $type = '.jpg';
                }
                if (strpos($image_name, 'jpeg') !== false) {
                    $type = '.jpeg';
                }
                if (strpos($image_name, 'png') !== false) {
                    $type = '.png';
                }
                if (strpos($image_name, 'gif') !== false) {
                    $type = '.gif';
                }

                // var_dump($image_name.$type);die;

                $filepath = drupal_realpath($storeFolder . '/' . $image_name . $type);
                // Create managed File object and associate with Image field.
                $image = file_get_contents($filepath);
                // Returns the new file object

                $filename = 'but-viet-artline-' . $image_name . $type;
                $file = file_save_data($image, 'public://' . $filename, FILE_EXISTS_RENAME);
                $images[] = $file;
                artline_article_uploader_remove($image_name . $type);
            }
        }

        if (isset($_POST['image'])) {
            foreach ($_POST['image'] as $fid) {
                $images[] = file_load($fid);
            }
        }
        $post = null;
        if (isset($_POST['article'])) {
            $post = strip_tags($_POST['article']);
        }

        if (empty($post) && !$images) {
            drupal_set_message('Không thể đăng bài viết vì bạn chưa nhập nội dung hay chưa upload hình ảnh.', 'error');
            drupal_goto('<front>');
        }
        //save node
        $node = new stdClass();
        $node->type = 'article';
        if (in_array('admin', $user->roles) || in_array('administrator', $user->roles)) {
            $node->status = 1;
        } else {
            $node->status = 0;
        }

        $node->language = LANGUAGE_NONE;
        $node->uid = $user->uid;
        $node->comment = 1;
        $node->title = substr(filter_bad_word($post), 0, 50);
        $node->field_description[LANGUAGE_NONE][0]['value'] = filter_bad_word($post);
        $node->domain_site = TRUE;
        if ($default_id == $id) {
            $node->domains = $all_domain;
        } else {
            $node->domains = array($id => $id);
        }

        if ($images) {
            foreach ($images as $image) {
                $node->field_image[LANGUAGE_NONE][] = (array)$image;
            }
        }
        if (isset($_POST['category'])) {
            $node->field_category[LANGUAGE_NONE][0]['tid'] = $_POST['category'];
        }
        node_save($node);

        drupal_goto('<front>');
    }
    if (isset($_POST['video_upload']) && $_POST['video_upload'] == 1) {

        $post = null;
        $file = false;
        if (isset($_POST['article'])) {
            $post = strip_tags($_POST['article']);
        }
        //check url link
        if (isset($_POST['video'])) {
            if (strpos($_POST['video'], 'youtube') !== false) {
                $youtube = explode('?v=', $_POST['video']);
                $youtube_id = $youtube[1];
                $uri_youtube = 'youtube://v/' . $youtube_id;

                $page = file_get_contents($_POST['video']);
                $doc = new DOMDocument();
                $doc->loadHTML(mb_convert_encoding($page, 'HTML-ENTITIES', 'UTF-8'));
                $title_div = $doc->getElementById('eow-title');
                $title = $title_div->nodeValue;
                if (check_uri($uri_youtube)) {
                    $file = check_uri($uri_youtube);
                } else {
                    $file = new stdClass();
                    $file->uid = $user->uid;
                    $file->filename = $title;
                    $file->uri = $uri_youtube;
                    $file->filemine = 'video/youtube';
                    $file->status = 1;
                    $file = file_save($file);
                }


            }

            if (strpos($_POST['video'], 'facebook') !== false) {
                $facebook = explode('videos/', $_POST['video']);
                $facebook_id = $facebook[1];
                $facebook_id = str_replace('/', '', $facebook_id);
                $uri_facebook = 'facebook://v/' . $facebook_id;
                if (check_uri($uri_facebook)) {
                    $file = check_uri($uri_facebook);
                } else {
                    $file = new stdClass();
                    $file->uid = $user->uid;
                    $file->filename = '';
                    $file->uri = $uri_facebook;
                    $file->filemine = 'video/facebook';
                    $file->status = 1;
                    $file = file_save($file);
                }


            }

        }
        if (empty($post) && !$file) {
            drupal_set_message('Không thể đăng bài viết vì bạn chưa nhập nội dung hay chưa upload video.', 'error');
            drupal_goto('<front>');
        }
        //save node
        $node = new stdClass();
        $node->type = 'article';
        if (in_array('admin', $user->roles) || in_array('administrator', $user->roles)) {
            $node->status = 1;
        } else {
            $node->status = 0;
        }
        $node->language = LANGUAGE_NONE;
        $node->uid = $user->uid;
        $node->comment = 1;
        $node->title = substr(filter_bad_word($post), 0, 50);
        $node->domain_site = TRUE;
        if ($default_id == $id) {
            $node->domains = $all_domain;
        } else {
            $node->domains = array($id => $id);
        }
        $node->field_description[LANGUAGE_NONE][0]['value'] = filter_bad_word($post);
        if ($file) {
            $node->field_video[LANGUAGE_NONE][0] = (array)$file;
        }
        if (isset($_POST['category'])) {
            $node->field_category[LANGUAGE_NONE][0]['tid'] = $_POST['category'];
        }
        node_save($node);
        drupal_goto('<front>');

    }


}

function seo_friendly_url($string)
{
    $string = str_replace(array('[\', \']'), '', $string);
    $string = preg_replace('/\[.*\]/U', '', $string);
    $string = preg_replace('/&(amp;)?#?[a-z0-9]+;/i', '-', $string);
    $string = htmlentities($string, ENT_COMPAT, 'utf-8');
    $string = preg_replace('/&([a-z])(acute|uml|circ|grave|ring|cedil|slash|tilde|caron|lig|quot|rsquo);/i', '\\1', $string);
    $string = preg_replace(array('/[^a-z0-9]/i', '/[-]+/'), '-', $string);
    return strtolower(trim($string, ''));
}

/**
 * implement remove image upload
 */

function artline_article_uploader_remove($filename)
{
    if (file_exists('uploads/' . $filename)) {
        unlink('uploads/' . $filename);
    }
}

/**
 * get uploaded file by user
 */
function get_uploaded_user($uid)
{
    $select = db_select('file_managed', 'f');
    $select->fields('f');
    $select->condition('uid', $uid);
    $select->orderBy('filename', 'ASC');
    $result = $select->execute()->fetchAllAssoc('fid');
    if ($result) {
        $files = array();
        foreach ($result as $key => $file) {
            $files[$key] = file_load($file->fid);
        }
        return $files;
    } else {
        return false;
    }
}

/**
 * check uri before save
 */
function check_uri($uri)
{
    $select = db_select('file_managed', 'f');
    $select->fields('f');
    $select->condition('uri', $uri);
    $select->orderBy('filename', 'ASC');
    $result = $select->execute()->fetchObject();
    if ($result) {
        $file = file_load($result->fid);
        return $file;
    } else {
        return false;
    }

}

/**
 * Get category list
 */
function get_category()
{
    $voca = taxonomy_vocabulary_machine_name_load('category');
    $terms = taxonomy_get_tree($voca->vid);
    $data = array();
    foreach ($terms as $term) {
        if (!taxonomy_get_parents($term->tid)) {
            $data[$term->tid] = $term->name;
        } else {
            $data[$term->tid] = ' -' . $term->name;
        }
    }
    return $data;
}

/**
 * Implement ctools
 */
function artline_store_post($node)
{
    $output = get_store_category($node->field_category[LANGUAGE_NONE][0]['tid']);
    print $output;
    drupal_exit();
}


/**
 * Implement ctools
 */
function artline_xu_post($node, $ajax)
{
    $output = t('<p>Chức năng đang được xây dựng.</p><p>Bạn hãy đăng ký thành viên để được các khuyến mãi khi tính năng này xây dựng xong
</p><p><a href="/user/register">Đăng ký thành viên tại đây</a></p>');

    if ($ajax) {
        ctools_include('ajax');
        $commands = array();
        $commands[] = ctools_modal_command_display('Đổi xu', $output);
        print ajax_render($commands);
        drupal_exit();
    } else {
        return $output;
    }
}

/**
 * get list store by caegory
 */
function get_store_category($tid)
{
    $query = db_select('node', 'n');
    $query->fields('n');
    $query->condition('type', 'store');
    $query->condition('status', 1);
    $query->orderBy('sticky', 'ASC');
    $result = $query->execute()->fetchAllAssoc('nid');
    if ($result) {
        $data = array();
        foreach ($result as $entity) {
            $node = node_load($entity->nid);
            if ($node->field_sale_all[LANGUAGE_NONE][0]['value'] == 0) {
                $data[] = $node;
            }

        }
        return theme('store_list', array('nodes' => $data, 'tid' => $tid));
    } else {
        return false;
    }
}

/**
 * get store link toan quoc
 */
function get_store_toanquoc()
{
    $query = db_select('node', 'n');
    $query->fields('n');
    $query->condition('type', 'store');
    $query->condition('status', 1);
    $query->orderBy('sticky', 'ASC');
    $result = $query->execute()->fetchAllAssoc('nid');
    if ($result) {
        $data = array();
        foreach ($result as $entity) {
            $node = node_load($entity->nid);
            if ($node->field_sale_all[LANGUAGE_NONE][0]['value'] == 1) {
                $data[] = $node;
            }
        }
        return $data;
    } else {
        return false;
    }
}

/**
 * load collection
 */
function artline_load_collection($node)
{
    $data = array();
    if (isset($node->field_store_link[LANGUAGE_NONE])) {
        foreach ($node->field_store_link[LANGUAGE_NONE] as $collect) {
            $data[] = entity_load('field_collection_item', array($collect['value']));
        }

        return $data;
    } else {
        return false;
    }


}

/**
 * Implementation of hook_block_info().
 */
function artline_block_info()
{
    $blocks = array();
    $blocks['artline_post'] = array('info' => t('Post article'));
    $blocks['artline_post_bottom'] = array('info' => t('Post article bottom'));
    $blocks['artline_upload_content'] = array('info' => t('Article Content'));
    $blocks['artline_category'] = array('info' => t('Menu category'));
    $blocks['post_block'] = array('info' => t('Post block'));
    $blocks['user_block'] = array('info' => t('User Block'));
    $blocks['admin_dashboard'] = array('info' => t('Admin dashboard'));
    $blocks['artline_footer'] = array('info' => t('Artline footer'));
    $blocks['post_list'] = array('info' => t('Post List'));
    $blocks['list_100_post_store'] = array('info' => t('List 100 post store'));
    return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function artline_block_view($delta = '')
{
    switch ($delta) {
        case 'admin_dashboard':
            return array(
                'subject' => t('Admin dashboard'),
                'content' => artline_admin_dashboard(),
            );

            break;
        case 'list_100_post_store':
            return array(
                'subject' => t('List 100 post store'),
                'content' => artline_list_100_post_store(),
            );

            break;
        case 'artline_footer':
            return array(
                'subject' => t('Artline footer'),
                'content' => theme('artline_footer'),
            );

            break;
        case 'artline_post':
            return array(
                'subject' => t('Post article'),
                'content' => artline_article_uploader(),
            );

            break;

        case 'post_list':
            return array(
                'subject' => t('Post List'),
                'content' => artline_get_post(),
            );

            break;
        case 'user_block':
            return array(
                'subject' => t('User Block'),
                'content' => login_user_block(),
            );

            break;

        case 'artline_post_bottom':

            return array(
                'subject' => t('Post article bottom'),
                'content' => theme('artline_post'),
            );

            break;
        case 'post_block':

            return array(
                'subject' => t('Post block'),
                'content' => theme('artline_post_block'),
            );

            break;

        case 'artline_upload_content':
            global $user;

            $files = get_uploaded_user($user->uid);
            return array(
                'subject' => t('Post article bottom'),
                'content' => theme('artline_upload_content', array('images' => $files, 'category' => get_category())),
            );

            break;
        case 'artline_category':

            return array(
                'subject' => t('Menu category'),
                'content' => get_category_menu(),
            );

            break;

    }
}

/**
 * Like artice by user
 */
function artline_like_article($uid, $nid)
{
    $select = db_select('artline_like', 'al');
    $select->fields('al');
    $select->condition('uid', $uid);
    $select->condition('nid', $nid);
    $result = $select->execute()->fetchObject();
    if ($result) {
        return false;
    } else {
        db_insert('artline_like')// Table name no longer needs {}
        ->fields(array(
            'uid' => $uid,
            'nid' => $nid,
            'count' => 1,
        ))
            ->execute();

        //add xu
        $node = node_load($nid);
        _update_xu_user($uid, _type_of_xu('like'));
        _update_xu_user($node->uid, _type_of_xu('owner'));
        return 'oke';
    }
    return 'oke';
}

/**
 * check user ready like
 */

function artline_user_liked($uid, $nid)
{
    $select = db_select('artline_like', 'al');
    $select->fields('al');
    $select->condition('uid', $uid);
    $select->condition('nid', $nid);
    $result = $select->execute()->fetchObject();

    if ($result) {
        return true;
    } else {
        return false;
    }
}

/**
 * get count like
 */
function artline_count_like($nid)
{
    $select = db_select('artline_like', 'al');
    $select->fields('al');
    $select->condition('nid', $nid);
    $result = $select->execute()->fetchAllAssoc('id');
    $count = 0;
    if ($result) {
        foreach ($result as $like) {
            $count += $like->count;
        }
    }
    return $count;
}

/**
 * get count like
 */
function artline_get_count_like($nid)
{
    $select = db_select('artline_like', 'al');
    $select->fields('al');
    $select->condition('nid', $nid);
    $result = $select->execute()->fetchAllAssoc('id');
    $count = 0;
    if ($result) {
        foreach ($result as $like) {
            $count += $like->count;
        }
    }
    print $count;
    exit();
}

/**
 * get menu list from category
 */
/**
 * Get category list
 */
function get_category_menu()
{
    $voca = taxonomy_vocabulary_machine_name_load('category');
    $terms = taxonomy_get_tree($voca->vid);
    return theme('artline_category', array('terms' => $terms));
}

/**
 * add form for comment
 */
function artline_conment_form($nid, $pid = 0)
{

    return theme('artline_comment', array('nid' => $nid, 'pid' => $pid));
}

/**
 * post comment
 */
function artline_post_comment()
{
    global $user;
    $data = $_POST;
    $comment = new stdClass();
    $comment->nid = $data['nid']; // nid of a node you want to attach a comment to
    $comment->pid = $data['cid']; // parent comment id, 0 if none
    $comment->uid = $user->uid; // user's id, who left the comment
    //  $comment->mail = 'email@example.com'; // user's email
    $comment->name = $data['name']; // If user is authenticated you can omit this field, it will be auto-populated, if the user is anonymous and you want to name him somehow, input his name here
    $comment->thread = '01/'; // OPTIONAL. If you need comments to be threaded you can fill this value. Otherwise omit it.
    $comment->hostname = ip_address();
    $comment->created = time(); // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
    //   $comment->is_anonymous = 0; // leave it as is
    $comment->status = COMMENT_PUBLISHED; // We auto-publish this comment
    $comment->language = LANGUAGE_NONE; // The same as for a node
    $comment->subject = filter_bad_word(strip_tags($data['comment']));
    $comment->comment_body[$comment->language][0]['value'] = filter_bad_word(strip_tags($data['comment'])); // Everything here is pretty much like with a node
    $comment->comment_body[$comment->language][0]['format'] = 'plain_text';
    try {
        comment_submit($comment); // saving a comment
        comment_save($comment);
        //add xu
        if(_check_ready_comment($user->uid, $data['nid'])){
            _update_xu_user($user->uid, _type_of_xu('comment'));
            _update_xu_user($data['uid'], _type_of_xu('owner'));
            $return = 'ok';
        }else{
            $return = 'ok';
        }

    } catch (Exception $ex) {
        $return = 'ko';
    }

    print filter_bad_word(strip_tags($data['comment']));
    drupal_exit();
}

function _check_ready_comment($uid, $nid){
    $query = db_select('comment','cm');
    $query->fields('cm');
    $query->condition('nid',$nid);
    $query->condition('uid',$uid);
    $result = $query->execute()->fetchAll();
    if($result){
        return false;
    }else{
        return true;
    }
}

/**
 * Get comment by node
 */
function artline_get_comment($nid, $cid = 0)
{
    if ($cid == 0) {
        $class = 'parent';
    } else {
        $class = 'child';
    }
    $node = node_load($nid);
    $query = db_select('comment', 'c');
    $query->fields('c');
    $query->condition('nid', $nid);
    $query->condition('status', 1);
    if ($cid > 0) {
        $query->condition('pid', $cid);
    } else {
        $query->condition('pid', 0);
    }
    $query->orderBy('created', 'ASC');
    $result = $query->execute()->fetchAllAssoc('cid');
    $data = array();
    if ($result) {
        foreach ($result as $key => $c) {
            $data[$key] = comment_load($key);
        }
        return theme('comment_artline_page', array('comments' => $data, 'class' => $class, 'nid' => $nid));
    } else {
        return false;
    }
}

/**
 * login user block
 */
function login_user_block()
{
    global $user;
    return theme('user_block', array('user' => $user));
}

/**
 * search page
 */
function artline_search_gss()
{
    if (!empty($_POST['keyword'])) {
        drupal_goto('search/gss/' . $_POST['keyword']);
    } else {
        drupal_goto('<front>');
    }
}

/**
 * get location
 */
function get_location()
{
    $voca = taxonomy_vocabulary_machine_name_load('location');
    $terms = taxonomy_get_tree($voca->vid);
    $data = array();
    foreach ($terms as $term) {
        $data[$term->tid] = $term->name;
    }
    return $data;
}

/**
 * Implement hook_node_view
 */
function artline_node_view($node)
{
    if ($node->type == 'article') {
        if (artline_check_ip($node->nid)) {
            db_insert('artline_post_view')// Table name no longer needs {}
            ->fields(array(
                'uid' => $node->uid,
                'nid' => $node->nid,
                'count' => 1,
                'created' => REQUEST_TIME,
                'ip' => ip_address()
            ))
                ->execute();
            // _update_xu_user($node->uid, _type_of_xu('click'));
        }
        $account = user_load($node->uid);
        if (in_array('partner', $account->roles) || in_array('store', $account->roles)) {

            if (artline_check_ip($node->nid, 'artline_tracking_referral')) {
                db_insert('artline_tracking_referral')// Table name no longer needs {}
                ->fields(array(
                    'uid' => $node->uid,
                    'nid' => $node->nid,
                    'count' => 1,
                    'created' => REQUEST_TIME,
                    'ip' => ip_address()
                ))
                    ->execute();
                //  _update_xu_user($node->uid, _type_of_xu('click'));
            }
        }
    }
}

/**
 * check before allow track again
 */
function artline_check_ip($nid, $db = 'artline_post_view')
{
    $ip = ip_address();
    $current = REQUEST_TIME;
    $query = db_select($db, 'pv');
    $query->fields('pv');
    $query->condition('ip', $ip);
    $query->condition('nid', $nid);
    $query->orderBy('created', 'desc');
    $result = $query->execute()->fetchObject();
    if ($result) {
        if ($current - $result->created > (variable_get('timeline_view', 1) * 60)) {
            return true;
        } else {
            return false;
        }
    } else {
        return true;
    }
}

/**
 * edit post by user
 */
function artline_edit_post()
{
    $data = $_POST;
    $node = node_load($data['nid']);
    $node->field_description[LANGUAGE_NONE][0]['value'] = filter_bad_word($data['value']);
    node_save($node);
    print filter_bad_word($data['value']);
    drupal_exit();
}

/**
 * Implement hook_form
 * Form change table
 */
function artline_edit_form($form, &$form_state)
{
    $node = $form_state['node'];
    $form['article'] = array(
        '#type' => 'textarea',
        '#default_value' => $node->field_description[LANGUAGE_NONE][0]['value'],
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Cập nhật'
    );
    return $form;
}

/**
 * Implement hook_form_submit
 * Form change table
 */
function artline_edit_form_submit($form, &$form_state)
{
    $node = $form_state['node'];
    $node->field_description[LANGUAGE_NONE][0]['value'];
    node_save($node);
    // Tell the browser to close the modal.
    $form_state['ajax_commands'][] = ctools_ajax_command_reload();
    $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
}

/**
 * edit post by user
 */
function artline_delete_post()
{
    $data = $_POST;
    $node = node_load($data['nid']);
    node_delete($node->nid);
    return 'ok';
    drupal_exit();
}

/**
 * Implement hook_form
 * Form change table
 */
function artline_delete_form($form, &$form_state)
{
    $node = $form_state['node'];
    $form['markup'] = array(
        '#markup' => '<p>Bạn có muốn xoá bài viết này không?</p>',
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Delete'
    );
    return $form;
}

/**
 * Implement hook_form_submit
 * Form change table
 */
function artline_delete_form_submit($form, &$form_state)
{
    $node = $form_state['node'];
    node_delete($node->nid);
    // Tell the browser to close the modal.
    $form_state['ajax_commands'][] = ctools_ajax_command_reload();
    $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
}

/**
 * Get avartar user
 */
function artline_get_avatar()
{
    global $user;
    $output = '';
    if ($user->uid > 0) {
        $account = user_load($user->uid);

        if ($account->picture) {
            $output .= '<span><i class="fa fa-search" aria-hidden="true"></i>' . theme('image_style', array('path' => $account->picture->uri, 'style_name' => 'avatar')) . '</span>';
        } else {
            $output .= '<span><i class="fa fa-search" aria-hidden="true"></i><img src="' . base_path() . drupal_get_path("theme", "phucma") . '/images/default-avatar.png"></span>';
        }
    } else {
        $output .= '<span><i class="fa fa-search" aria-hidden="true"></i><img src="' . base_path() . drupal_get_path("theme", "phucma") . '/images/default-avatar.png"></span>';
    }


    return $output;
}

/**
 * Report by user
 * count post
 */
function count_post_user($uid)
{
    $count = 0;
    $query = db_select('node', 'n');
    $query->fields('n');
    $query->condition('type', 'article');
    $query->condition('status', 1);
    $query->condition('uid', $uid);
    $result = $query->execute()->fetchAllAssoc('nid');
    $count = count($result);
    return $count;
}

/**
 * Report by user
 * count post
 */
function count_like_user($uid = null, $nid = null)
{
    $count = 0;
    $query = db_select('artline_like', 'al');
    $query->fields('al');
    if ($nid) {
        $query->condition('nid', $nid);
    }
    if ($uid) {
        $query->condition('uid', $uid);
    }
    $result = $query->execute()->fetchAllAssoc('id');
    if ($result) {
        foreach ($result as $re) {
            $count += $re->count;
        }
    }
    return $count;
}

/**
 * Report user
 * count partner view
 */
function count_post_view_user($uid, $nid = null)
{
    $count = 0;
    $query = db_select('artline_post_view', 'al');
    $query->fields('al');
    $query->condition('uid', $uid);
    if ($nid) {
        $query->condition('nid', $nid);
    }
    $result = $query->execute()->fetchAllAssoc('id');
    if ($result) {
        foreach ($result as $re) {
            $count += $re->count;
        }
    }
    return $count;
}

/**
 * Report user
 * count partner view
 */
function count_partner_view_user($uid, $nid = null)
{
    $count = 0;
    $query = db_select('artline_tracking_referral', 'al');
    $query->fields('al');
    $query->condition('uid', $uid);
    if ($nid) {
        $query->condition('nid', $nid);
    }
    $result = $query->execute()->fetchAllAssoc('id');
    if ($result) {
        foreach ($result as $re) {
            $count += $re->count;
        }
    }
    return $count;
}

/**
 * Filter bad word
 */
function filter_bad_word($text)
{
    if (variable_get('filter_word')) {
        $filters = variable_get('filter_word');
        $filters = explode(',', $filters);
        foreach ($filters as $filter) {
            $content = '';
            $content .= trim($filter);
            $content .= ' ';
            $text = str_replace($content, ' *** ', $text);
        }
    }
    return $text;
}

/**
 * admin tdashboard
 */

function artline_admin_dashboard()
{
    return theme('admin_dashboard');
}

/**
 * share link
 */
function artline_article_shared($token)
{
    $arr = base64_decode($token);
    $arr = explode('|', $arr);
    $nid = $arr[0];
    $uid = $arr[1];
    $node = node_load($nid);
    if ($uid > 0) {
        $user = user_load($uid);
        if ($node->type == 'article') {
            if (artline_check_ip($node->nid)) {
                db_insert('artline_post_view')// Table name no longer needs {}
                ->fields(array(
                    'uid' => $node->uid,
                    'nid' => $node->nid,
                    'count' => 1,
                    'created' => REQUEST_TIME,
                    'ip' => ip_address()
                ))
                    ->execute();

                //add xu
                _update_xu_user($uid, _type_of_xu('click'));
                _update_xu_user($node->uid, _type_of_xu('owner'));
            }
            $account = user_load($node->uid);
            if (in_array('partner', $account->roles) || in_array('store', $account->roles)) {

                if (artline_check_ip($node->nid, 'artline_tracking_referral')) {
                    db_insert('artline_tracking_referral')// Table name no longer needs {}
                    ->fields(array(
                        'uid' => $node->uid,
                        'nid' => $node->nid,
                        'count' => 1,
                        'created' => REQUEST_TIME,
                        'ip' => ip_address()
                    ))
                        ->execute();

                    _update_xu_user($uid, _type_of_xu('click'));
                    _update_xu_user($node->uid, _type_of_xu('owner'));
                }
            }

            if (in_array('partner', $user->roles) || in_array('store', $user->roles)) {

                if (artline_check_ip($node->nid, 'artline_tracking_referral')) {
                    db_insert('artline_tracking_referral')// Table name no longer needs {}
                    ->fields(array(
                        'uid' => $user->uid,
                        'nid' => $node->nid,
                        'count' => 1,
                        'created' => REQUEST_TIME,
                        'ip' => ip_address()
                    ))
                        ->execute();

                    _update_xu_user($uid, _type_of_xu('click'));
                    _update_xu_user($node->uid, _type_of_xu('owner'));
                }
            }
        }
    }

    drupal_goto('node/' . $nid);

}

/**
 * encode url
 */
function artline_share_url_encode($nid)
{
    global $user;
    $data = $nid . '|' . $user->uid . '|artline.vn';
    $token = base64_encode($data);
    $url = url('article/link/' . $token, array('absolute' => true));
    return $url;
}

/**
 * function
 */
function _post_block()
{
    return theme('artline_post_block');
}

/**
 * hook_user_insert
 */
function artline_user_presave(&$edit, $account, $category)
{
    $select = db_select('user_profile_tmp', 'tt');
    $select->fields('tt');
    $select->condition('email', $account->mail);
    $result = $select->execute()->fetchObject();
    if ($result) {
        $edit['field_fullname'][LANGUAGE_NONE][0]['value'] = $result->name;
        $edit['field_nickname'][LANGUAGE_NONE][0]['value'] = $result->nickname;
        $edit['field_profile'][LANGUAGE_NONE][0]['value'] = $result->link;
    }

}

/**
 * get profile link
 */
function _get_profile_link($uid)
{
    $user = user_load($uid);
//    if (isset($user->field_profile[LANGUAGE_NONE])) {
//        $link = $user->field_profile[LANGUAGE_NONE][0]['value'];
//    } else {
        $link = url('user/' . $uid);
 //   }
    return $link;
}

/**
 * public post
 */
function artline_public_post()
{
    $nid = $_POST['nid'];
    $node = node_load($nid);
    $node->status = 1;
    node_save($node);
    print 'ok';
    drupal_exit();
}

/**
 * public post
 */
function artline_unpublic_post()
{
    $nid = $_POST['nid'];
    $node = node_load($nid);
    $node->status = 0;
    node_save($node);
    print 'ok';
    drupal_exit();
}

/**
 * function
 */

function artline_uptop($node)
{
    $node->created = time();
    node_save($node);
    drupal_goto($_GET['destination']);
}

/**
 * update xu for user
 */

function _update_xu_user($uid, $xu)
{
    try {
        db_update('artline_xu')// Table name no longer needs {}
        ->fields(array('uid' => $uid))
            ->expression('xu', 'xu + :xu', array(':xu' => $xu))
            ->condition('uid', $uid, '=')
            ->execute();
    } catch (Exception $e) {
        return $e->getMessage();
    }

}


/**
 * update xu for user
 */

function _update_downxu_user($uid, $xu)
{
    try {
        db_update('artline_xu')// Table name no longer needs {}
        ->fields(array('uid' => $uid))
            ->expression('xu', 'xu - :xu', array(':xu' => $xu))
            ->condition('uid', $uid, '=')
            ->execute();
    } catch (Exception $e) {
        return $e->getMessage();
    }

}

/**
 * xu type of user
 */
function _type_of_xu($type)
{
    $xu = 0;
    switch ($type) {
        case 'post':
            $xu = variable_get('xu_post', 20);
            break;
        case 'share_social':
            $xu = variable_get('xu_share_social', 20);
            break;
        case 'like':
            $xu = variable_get('xu_like', 10);
            break;
        case 'comment':
            $xu = variable_get('xu_comment', 20);
            break;
        case 'click':
            $xu = variable_get('xu_click', 10);
            break;
        case 'friend':
            $xu = variable_get('xu_friend', 20);
            break;
        case 'owner':
            $xu = variable_get('owner_post', 2);
            break;
    }
    return $xu;
}

/**
 * hook_user_insert
 */
/**
 * Implements hook_user_insert().
 */
function artline_user_insert(&$edit, $account, $category)
{
    db_insert('artline_xu')// Table name no longer needs {}
    ->fields(array(
        'uid' => $account->uid,
        'xu' => variable_get('xu_register', 20),
    ))
        ->execute();
}

/**
 * User get xu
 */
function _user_get_xu($uid)
{
    $query = db_select('artline_xu', 'xu');
    $query->fields('xu');
    $query->condition('uid', $uid);
    $result = $query->execute()->fetchObject();
    $xu = 0;
    if ($result) {
        $xu = $result->xu;
    }
    return $xu;
}

/**
 * update xu to user
 */
function _update_xu_user_first()
{
    $query = db_select('users', 'u');
    $query->fields('u');
    $result = $query->execute()->fetchAll();
    foreach ($result as $u) {
        db_insert('artline_xu')// Table name no longer needs {}
        ->fields(array(
            'uid' => $u->uid,
            'xu' => variable_get('xu_register', 20),
        ))
            ->execute();
    }

}

/**
 * xu update
 */
function xu_update_action()
{
    global $user;
    $uid = $_POST['uid'];
    $query = db_select('artline_xu', 'xu');
    $query->fields('xu');
    $query->condition('uid', $user->uid);
    $result = $query->execute()->fetchObject();
    $xu = 0;
    if ($result) {
        $xu = $result->xu;
    }
    print $xu;
    drupal_exit();
}

/**
 * Implement create change gif
 */
function artline_product_gif($node)
{
    global $user;
    if ($user->uid > 0) {
        $form_state['build_info']['args'] = array($node);
        $form = drupal_build_form('artline_product_gif_change', $form_state);
        print drupal_render($form);
        drupal_exit();

    } else {
        $form = drupal_get_form('user_login_block');
        print drupal_render($form);
        drupal_exit();
    }

}

/**
 * form gif change
 */
function artline_product_gif_change($form, &$form_state)
{

    global $user;
    if ($user->uid > 0) {
        $xu = _user_get_xu($user->uid);
        $node = $form_state['build_info']['args'][0];
        if (_get_product_tid($node->field_category[LANGUAGE_NONE][0]['tid'])) {
            $product = _get_product_tid($node->field_category[LANGUAGE_NONE][0]['tid']);
            if ($product->status == 1) {
                $colors = array();
                if (isset($product->field_color[LANGUAGE_NONE])) {
                    foreach ($product->field_color[LANGUAGE_NONE] as $t) {
                        $terms = taxonomy_term_load($t['tid']);
                        $colors['Màu ' . $terms->name] = 'Màu ' . $terms->name;
                    }
                }

                $product_info = theme('product_info', array('product' => $product));
                $form_state['product'] = $product;
                $form['product_info'] = array(
                    '#markup' => render($product_info)
                );
                //check xu before load form
                if ($product->field_xu[LANGUAGE_NONE][0]['value'] <= $xu) {
                    if (isset($product->field_color[LANGUAGE_NONE])) {
                        foreach ($product->field_color[LANGUAGE_NONE] as $t) {
                            $terms = taxonomy_term_load($t['tid']);
                            $form['color_name_' . $terms->tid] = array(
                                '#markup' => '<div class="product-color"><span class="color"style="background: ' . $terms->field_color_code[LANGUAGE_NONE][0]['value'] . '">&nbsp;</span></div>',
                                '#prefix' => '<div class="color-qty">',
                            );
                            $form['color_' . $terms->tid] = array(
                                '#type' => 'select',
                                '#options' => array(
                                    0 => 0,
                                    1 => 1,
                                    2 => 2,
                                    3 => 3,
                                    4 => 4,
                                    5 => 5,
                                    6 => 6,
                                    7 => 7,
                                    8 => 8,
                                    9 => 9,
                                    10 => 10

                                ),
                                '#suffix' => '</div>'
                            );
                        }
                    }

                    $form['address_info'] = array(
                        '#type' => 'select',
                        '#options' => array(
                            0 => t('Sử dụng thông tin nhận quà của bạn.'),
                            1 => t('Nhập thông tin nhận quà mới.'),
                        ),
                        '#title' => t('Địa chỉ nhận quà.'),
                        '#prefix' => '<div class="clearfix"></div>',
                    );
                    $form['xu'] = array(
                        '#type' => 'hidden',
                        '#value' => $product->field_xu[LANGUAGE_NONE][0]['value'],
                    );
                    $form['product_id'] = array(
                        '#type' => 'hidden',
                        '#value' => $product->nid,
                    );
                    $form['name'] = array(
                        '#type' => 'textfield',
                        '#title' => t('Họ và tên người nhận. '),
                    );
                    $form['address'] = array(
                        '#type' => 'textfield',
                        '#title' => t('Địa chỉ nhận quà.'),
                    );
                    $form['telephone'] = array(
                        '#type' => 'textfield',
                        '#title' => t('Điện thoại người nhận. '),
                    );
                    $form['notice'] = array(
                        '#type' => 'textfield',
                        '#title' => t('Lời nhắn. '),
                    );
                    $form['submit'] = array(
                        '#type' => 'submit',
                        '#value' => t('Đổi quà')
                    );
                } else {
                    $no_condition = theme('no_condition');
                    $form['no_condition'] = array(
                        '#markup' => render($no_condition),
                    );
                }

            } else {
                $no_product = theme('no_product');
                $form['no_product'] = array(
                    '#markup' => render($no_product),
                );
            }
        } else {
            $no_product = theme('no_product');
            $form['no_product'] = array(
                '#markup' => render($no_product),
            );
        }

    }


    return $form;

}

/**
 * Implement hook_form_validate
 */
function artline_product_gif_change_validate($form, &$form_state)
{
    global $user;
    $product = $form_state['product'];
    $qty = 0;
    if (isset($product->field_color[LANGUAGE_NONE])) {
        foreach ($product->field_color[LANGUAGE_NONE] as $t) {
            $qty += $form_state['values']['color_' . $t['tid']];
        }
    }
    $xu = _user_get_xu($user->uid);
    $total = $product->field_xu[LANGUAGE_NONE][0]['value'] * $qty;
    if ($total > $xu) {
        form_set_error('xu', t('Số điểm hiện nay bạn không đủ để đổi sản phẩm, bạn có thể bớt, thay đổi sản phẩm khác.'));
    }
    if ($qty == 0) {
        form_set_error('xu', t('Vui lòng chọn màu sắc.'));
    }

    if ($form_state['values']['address_info'] == 1) {
        if (empty($form_state['values']['name'])) {
            form_set_error('name', t('Vui lòng nhập họ và tên.'));
        }
        if (empty($form_state['values']['address'])) {
            form_set_error('address', t('Vui lòng nhập địa chỉ nhận quà.'));
        }
        if (empty($form_state['values']['telephone'])) {
            form_set_error('telephone', t('Vui lòng nhập số điện thoại.'));
        }
    }
}

/**
 * Implement hook_form_validate
 */
function artline_product_gif_change_submit($form, &$form_state)
{

    global $user;
    $account = user_load($user->uid);
    $article = $form_state['build_info']['args'][0];
    $data = $form_state['values'];
    $product = $form_state['product'];
    $qty = 0;
    $color = '';
    if (isset($product->field_color[LANGUAGE_NONE])) {
        foreach ($product->field_color[LANGUAGE_NONE] as $t) {
            $term = taxonomy_term_load($t['tid']);
            if ($form_state['values']['color_' . $t['tid']] > 0) {
                $color .= $term->name . '(' . $form_state['values']['color_' . $t['tid']] . ') ';
            }
            $qty += $form_state['values']['color_' . $t['tid']];
        }
    }
    if (isset($data['name']) && !empty($data['name'])) {
        $name = $data['name'];
    } else {
        $name = $account->field_name_gif[LANGUAGE_NONE][0]['value'];
    }
    if (isset($data['address']) && !empty($data['address'])) {
        $address = $data['address'];
    } else {
        $address = $account->field_address_info[LANGUAGE_NONE][0]['value'];
    }
    if (isset($data['telephone']) && !empty($data['telephone'])) {
        $phone = $data['telephone'];
    } else {
        $phone = $account->field_phone[LANGUAGE_NONE][0]['value'];
    }
    $node = new stdClass();
    $node->title = $name . ' vừa đổi quà ' . $product->title;
    $node->uid = $user->uid;
    $node->created = REQUEST_TIME;
    $node->type = 'gif';
    $node->status = 1;
    $node->language = LANGUAGE_NONE;
    $node->field_your_name[LANGUAGE_NONE][0]['value'] = $name;
    $node->field_gif_address[LANGUAGE_NONE][0]['value'] = $address;
    $node->field_gif_phone[LANGUAGE_NONE][0]['value'] = $phone;
    $node->field_gif_email[LANGUAGE_NONE][0]['value'] = $user->mail;
    $node->field_product_id[LANGUAGE_NONE][0]['target_id'] = $product->nid;
    $node->field_author[LANGUAGE_NONE][0]['target_id'] = $article->uid;
    $node->field_gif_xu[LANGUAGE_NONE][0]['value'] = ($product->field_xu[LANGUAGE_NONE][0]['value'] * $qty);
    $node->field_gif_color[LANGUAGE_NONE][0]['value'] = $color;
    $node->field_qty[LANGUAGE_NONE][0]['value'] = $qty;
    if (!empty($data['notice'])) {
        $node->body[LANGUAGE_NONE][0]['value'] = $data['notice'];
    }
    $node->field_status[LANGUAGE_NONE][0]['value'] = 'pending';
    node_save($node);
    //update down xu of client
    _update_downxu_user($user->uid, $qty * $product->field_xu[LANGUAGE_NONE][0]['value']);
    //send email to admin
    //  drupal_set_message(t('Bạn vừa đổi quà thành công. Chúng tôi sẽ kiểm tra và gửi đến bạn trong thời gian sớm nhất.'));
    //  $form_state['ajax_commands'][] = ctools_ajax_command_reload();
    //  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
    drupal_goto('<front>', array(
        'query' => array(
            'popup' => 'true',
            'point' => $qty * $product->field_xu[LANGUAGE_NONE][0]['value'],
            'product' => $product->title
        )));


}


/**
 * Implement ctools
 */
function artline_product_post($node)
{
    $form_state['build_info']['args'] = array($node);
    $form = drupal_build_form('artline_product_update', $form_state);
    // drupal_add_js(drupal_get_path('theme','phucma').'/js/artline.js');
    print drupal_render($form);
    drupal_exit();
}

/**
 * product update
 */
function artline_product_update($form, &$form_state, $node)
{
    $node = $form_state['build_info']['args'][0];
    $form['nid'] = array(
        '#type' => 'hidden',
        '#value' => $node->nid,
    );
    $form['product'] = array(
        '#type' => 'select',
        '#title' => t('Chọn Product'),
        '#options' => get_category(),
        '#default_value' => $node->field_category[LANGUAGE_NONE][0]['tid'],
        '#suffix' => '<div class="product-submit">',
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Cập nhật',
        '#suffix' => '</div>'
    );
    return $form;
}

/**
 * Get list taxonomy
 */

/**
 * @param $form
 * @param $form_state
 */

function artline_product_update_validate($form, &$form_state)
{
    if (empty($form_state['values']['product'])) {
        form_set_error('product', t('Vui lòng chọn sản phẩm.'));
    }
}

function artline_product_update_submit($form, &$form_state)
{
    $node = node_load($form_state['values']['nid']);
    $node->field_category[LANGUAGE_NONE][0]['tid'] = $form_state['values']['product'];
    node_save($node);
    drupal_goto('<front>');
}

function _get_products()
{
    $query = db_select('node', 'n');
    $query->fields('n');
    $query->condition('type', 'product');
    $query->condition('status', 1);
    $query->orderBy('title', 'ASC');
    $result = $query->execute()->fetchAllAssoc('nid');
    $data = array();
    if ($result) {
        foreach ($result as $n) {
            $data[$n->nid] = $n->title;
        }
    }
    return $data;
}


/**
 * Implements hook_mail().
 */
/*
 * 	drupal mail looks for a function that matches the first parameter _ mail to build the message
 */
function artline_mail($key, &$message, $params)
{
    switch ($key) {
        case 'doiqua':
            $headers = array(
                'MIME-Version' => '1.0',
                'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
                'Content-Transfer-Encoding' => '8Bit',
                'X-Mailer' => 'Drupal'
            );
            foreach ($headers as $key => $value) {
                $message['headers'][$key] = $value;
            };
            $message['subject'] = t($params['subject']);
            $message['body'][] = $params['body'];
            break;
    }
}

/**
 * Implement hook_node_update
 *
 */

function artline_node_update($node)
{
    if ($node->type == 'gif') {
        if ($node->field_status[LANGUAGE_NONE][0]['value'] == 'processing') {
            //hash content before
            $time = time();
            $email = $node->field_gif_email[LANGUAGE_NONE][0]['value'];
            $hashtoken = $time . '|' . $email . '|' . $node->nid;
            $token = base64_encode($hashtoken);
            //load content
            $product = node_load($node->field_product_id[LANGUAGE_NONE][0]['target_id']);
            $params = array();
            $to = $email;
            $info = variable_get('email_processcing');
            preg_match_all('/(title=[^)]+)/i',$info, $result);
            $title = str_replace('(title=','',$result[0][0]);
            $title = str_replace(')','',$title);
            $title = str_replace('title=','',$title);
            $params['subject'] = $title;
            $info = str_replace('(title=','',$result[0][0]);
            $info = str_replace(')','',$title);
            $info = str_replace('title=','',$title);
            $link = '<a href="' . url('gift/confirm/' . $token, array('absolute' => true)) . '">' . url('gift/confirm/' . $token, array('absolute' => true)) . '</a>';
            $info = str_replace('[name]', $node->field_your_name[LANGUAGE_NONE][0]['value'], $info);
            $info = str_replace('[address]', $node->field_gif_address[LANGUAGE_NONE][0]['value'], $info);
            $info = str_replace('[phone]', $node->field_gif_phone[LANGUAGE_NONE][0]['value'], $info);
            $info = str_replace('[link]', $link, $info);
            $params['body'] = $info;

            // Add an associative array about this desired attachment.
            drupal_mail('artline', 'doiqua', $to, language_default(), $params, 'no-reply@butvietnhatban.vn', TRUE);
        }

        if ($node->field_status[LANGUAGE_NONE][0]['value'] == 'completed') {
            //hash content before
            $email = $node->field_gif_email[LANGUAGE_NONE][0]['value'];
            //load content
            $product = node_load($node->field_product_id[LANGUAGE_NONE][0]['target_id']);
            $params = array();
            $to = $email;
            $info = variable_get('email_compeleted');
            preg_match_all('/(title=[^)]+)/i',$info, $result);
            $title = str_replace('(title=','',$result[0][0]);
            $title = str_replace(')','',$title);
            $title = str_replace('title=','',$title);
            $params['subject'] = $title;
            $info = str_replace('(title=','',$result[0][0]);
            $info = str_replace(')','',$title);
            $info = str_replace('title=','',$title);
            $link = '<a href="' . url('gift/confirm/' . $token, array('absolute' => true)) . '">' . url('gift/confirm/' . $token, array('absolute' => true)) . '</a>';

            $info = str_replace('[name]', $node->field_your_name[LANGUAGE_NONE][0]['value'], $info);
            $params['body'] = $info;

            // Add an associative array about this desired attachment.
            drupal_mail('artline', 'doiqua', $to, language_default(), $params, 'no-reply@butvietnhatban.vn', TRUE);
        }

        if ($node->field_status[LANGUAGE_NONE][0]['value'] == 'cancel') {
            //hash content before
            $email = $node->field_gif_email[LANGUAGE_NONE][0]['value'];
            //load content
            $product = node_load($node->field_product_id[LANGUAGE_NONE][0]['target_id']);
            $params = array();
            $to = $email;
            $info = variable_get('email_cancel');
            preg_match_all('/(title=[^)]+)/i',$info, $result);
            $title = str_replace('(title=','',$result[0][0]);
            $title = str_replace(')','',$title);
            $title = str_replace('title=','',$title);
            $params['subject'] = $title;
            $info = str_replace('(title=','',$result[0][0]);
            $info = str_replace(')','',$title);
            $info = str_replace('title=','',$title);
            $link = '<a href="' . url('gift/confirm/' . $token, array('absolute' => true)) . '">' . url('gift/confirm/' . $token, array('absolute' => true)) . '</a>';

            $info = str_replace('[name]', $node->field_your_name[LANGUAGE_NONE][0]['value'], $info);
            $params['body'] = $info;

            //refun diem diem to user
            _update_xu_user($node->uid, $node->field_gif_xu[LANGUAGE_NONE][0]['value']);

            // Add an associative array about this desired attachment.
            drupal_mail('artline', 'doiqua', $to, language_default(), $params, 'no-reply@butvietnhatban.vn', TRUE);
        }
    }

    if ($node->type == 'article' && $node->status == 1) {
        if (variable_get('approve_' . $node->nid) != 1) {
            _update_xu_user($node->uid, _type_of_xu('post'));
            variable_set('approve_' . $node->nid, 1);
        }
    }
}

/**
 * admin dashboard
 */
function artline_admins_dashboard()
{
    // drupal_add_css(drupal_get_path('module', 'artline') . '/lib/admin_panel/admin-panel.css');
    return theme('admins_dashboard');
}

/**
 * Implement hook_form_register_alter
 */
function artline_form_alter(&$form, &$form_state, $form_id)
{
    if ($form_id == 'user_register_form') {
        if (isset($_GET['token'])) {
            $token = base64_decode($_GET['token']);
            $user_invite = user_load_by_mail($token);
            $form_state['user_invite'] = $user_invite;

            $form['#submit'][] = 'invite_add_score';
        }
    }
}

function invite_add_score($form, &$form_state)
{
    $user_invite = $form_state['user_invite'];
    _update_xu_user($user_invite->uid, _type_of_xu('friend'));
}

/**
 * Get product relate
 */

function _get_product_tid($tid)
{
    $nodes = taxonomy_select_nodes($tid);
    foreach ($nodes as $nid) {
        $node = node_load($nid);
        if ($node->type == 'product') {
            return $node;
            break;
        }
    }
}

/**
 * function replace tieng viet
 */

function _replace_vietnamese($text)
{
    $alias = str_replace(array('ù', 'ú', 'ủ', 'ũ', 'ụ', 'ư', 'ứ', 'ừ', 'ử', 'ữ', 'ự'), 'u', $text);
    $alias = str_replace(array('è', 'é', 'ẻ', 'ẽ', 'ẹ', 'ê', 'ế', 'ề', 'ể', 'ễ', 'ệ',), 'e', $alias);
    $alias = str_replace(array('ò', 'ó', 'ỏ', 'õ', 'ọ', 'ơ', 'ớ', 'ờ', 'ở', 'ỡ', 'ợ', 'ô', 'ố', 'ồ', 'ổ', 'ỗ', 'ộ'), 'o', $alias);
    $alias = str_replace(array('à', 'á', 'ả', 'ã', 'ạ', 'â', 'ấ', 'ầ', 'ẩ', 'ẫ', 'ậ', 'ă', 'ắ', 'ằ', 'ẳ', 'ẵ', 'ặ'), 'a', $alias);
    $alias = str_replace(array('ì', 'í', 'ỉ', 'ĩ', 'ị'), 'i', $alias);
    $alias = str_replace(array('ỳ', 'ý', 'ỹ', 'ỵ',), 'y', $alias);
    $alias = str_replace(array('đ'), 'd', $alias);
    return $alias;
}


/**
 * Implements hook_field_extra_fields().
 */
function artline_field_extra_fields()
{
    $extra['user']['user'] = array(
        'display' => array(
            'point' => array(
                'label' => t('Point'),
                'description' => t('Point'),
                'weight' => 0,
            ),
        )
    );
    $extra['user']['user'] = array(
        'display' => array(
            'email' => array(
                'label' => t('Email'),
                'description' => t('Email'),
                'weight' => 0,
            ),
        )
    );
    return $extra;
}

/**
 * Implements hook_user_view().
 */
function artline_user_view($account, $view_mode)
{

    $account->content['point'] = array(
        '#markup' => '<div class="point-user"><h4>Số điểm hiện tại</h4> <p>' . _user_get_xu($account->uid) . '</p></div>',
    );
    $account->content['email'] = array(
        '#markup' => '<div class="point-user"><h4>Email</h4> <p>' . $account->mail . '</p></div>',
    );
}


